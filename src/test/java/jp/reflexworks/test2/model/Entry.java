package jp.reflexworks.test2.model;

import java.util.List;

import jp.reflexworks.atom.api.Condition;
import jp.reflexworks.atom.entry.EntryBase;

public class Entry extends EntryBase {
	
	private static final long serialVersionUID = 1L;

	public Info info;
	public List<Comment> comment;
	public String deleteFlg;

	public Info getInfo() {
		return info;
	}

	public void setInfo(Info info) {
		this.info = info;
	}

	public List<Comment> getComment() {
		return comment;
	}

	public void setComment(List<Comment> comment) {
		this.comment = comment;
	}

	public String getDeleteFlg() {
		return deleteFlg;
	}

	public void setDeleteFlg(String deleteFlg) {
		this.deleteFlg = deleteFlg;
	}

	@Override
	public String toString() {
		return super.toString();
	}

	public Object getValue(String fldname) {if (author!=null) for (int i=0;i<author.size();i++) { Object value =((jp.reflexworks.atom.entry.SoftSchema)author.get(i)).getValue(fldname);if (value!=null) return value;}if (category!=null) for (int i=0;i<category.size();i++) { Object value =((jp.reflexworks.atom.entry.SoftSchema)category.get(i)).getValue(fldname);if (value!=null) return value;}if (content!=null) { Object value=content.getValue(fldname); if (value!=null) return value;}if (contributor!=null) for (int i=0;i<contributor.size();i++) { Object value =((jp.reflexworks.atom.entry.SoftSchema)contributor.get(i)).getValue(fldname);if (value!=null) return value;}if (fldname.equals("id")) return id;if (link!=null) for (int i=0;i<link.size();i++) { Object value =((jp.reflexworks.atom.entry.SoftSchema)link.get(i)).getValue(fldname);if (value!=null) return value;}if (fldname.equals("published")) return published;if (fldname.equals("rights")) return rights;if (fldname.equals("rights_$type")) return rights_$type;if (fldname.equals("summary")) return summary;if (fldname.equals("summary_$type")) return summary_$type;if (fldname.equals("title")) return title;if (fldname.equals("title_$type")) return title_$type;if (fldname.equals("subtitle")) return subtitle;if (fldname.equals("subtitle_$type")) return subtitle_$type;if (fldname.equals("updated")) return updated;if (info!=null) { Object value=info.getValue(fldname); if (value!=null) return value;}if (comment!=null) for (int i=0;i<comment.size();i++) { Object value =((jp.reflexworks.atom.entry.SoftSchema)comment.get(i)).getValue(fldname);if (value!=null) return value;}if (fldname.equals("deleteFlg")) return deleteFlg;return null;};
	public void encrypt(Object cipher) { jp.reflexworks.atom.mapper.CipherContext context= new jp.reflexworks.atom.mapper.CipherContext(cipher,this.id,"testsecret123");if (author!=null) for (int i=0;i<author.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)author.get(i)).encrypt(context);}if (category!=null) for (int i=0;i<category.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)category.get(i)).encrypt(context);}if (content!=null) content.encrypt(context);if (contributor!=null) for (int i=0;i<contributor.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)contributor.get(i)).encrypt(context);}if (link!=null) for (int i=0;i<link.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)link.get(i)).encrypt(context);}if (rights!=null)rights=(String) jp.reflexworks.atom.mapper.CipherUtil.doEncrypt(""+rights, "testsecret123"+id, cipher);if (info!=null) info.encrypt(context);if (comment!=null) for (int i=0;i<comment.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)comment.get(i)).encrypt(context);}};
	public void decrypt(Object cipher) { jp.reflexworks.atom.mapper.CipherContext context= new jp.reflexworks.atom.mapper.CipherContext(cipher,this.id,"testsecret123");if (author!=null) for (int i=0;i<author.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)author.get(i)).decrypt(context);}if (category!=null) for (int i=0;i<category.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)category.get(i)).decrypt(context);}if (content!=null) content.decrypt(context);if (contributor!=null) for (int i=0;i<contributor.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)contributor.get(i)).decrypt(context);}if (link!=null) for (int i=0;i<link.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)link.get(i)).decrypt(context);}if (rights!=null)rights=(String) jp.reflexworks.atom.mapper.CipherUtil.doDecrypt(""+rights, "testsecret123"+id, cipher);if (info!=null) info.decrypt(context);if (comment!=null) for (int i=0;i<comment.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)comment.get(i)).decrypt(context);}};
	public boolean isMatch(Condition[] conditions) {jp.reflexworks.atom.mapper.ConditionContext context = new jp.reflexworks.atom.mapper.ConditionContext(conditions);if (category!=null) for (int i=0;i<category.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)category.get(i)).isMatch(context);}if (content!=null) content.isMatch(context);if (contributor!=null) for (int i=0;i<contributor.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)contributor.get(i)).isMatch(context);}if (id!=null) {context.fldname="id";context.type="String";context.obj=id;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (link!=null) for (int i=0;i<link.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)link.get(i)).isMatch(context);}if (published!=null) {context.fldname="published";context.type="String";context.obj=published;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (rights!=null) {context.fldname="rights";context.type="String";context.obj=rights;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (rights_$type!=null) {context.fldname="rights_$type";context.type="String";context.obj=rights_$type;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (summary!=null) {context.fldname="summary";context.type="String";context.obj=summary;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (summary_$type!=null) {context.fldname="summary_$type";context.type="String";context.obj=summary_$type;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (title!=null) {context.fldname="title";context.type="String";context.obj=title;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (title_$type!=null) {context.fldname="title_$type";context.type="String";context.obj=title_$type;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (subtitle!=null) {context.fldname="subtitle";context.type="String";context.obj=subtitle;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (subtitle_$type!=null) {context.fldname="subtitle_$type";context.type="String";context.obj=subtitle_$type;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}if (updated!=null) {context.fldname="updated";context.type="String";context.obj=updated;jp.reflexworks.atom.mapper.ConditionContext.checkCondition(context);}return context.isMatch();};
	public boolean validate(String uid, java.util.List groups) throws java.text.ParseException {String myself = getCreatorUid();if (author!=null) for (int i=0;i<author.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)author.get(i)).validate(uid,groups,myself);}if (category!=null) for (int i=0;i<category.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)category.get(i)).validate(uid,groups,myself);}if (content!=null) content.validate(uid,groups,myself);if (contributor!=null) for (int i=0;i<contributor.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)contributor.get(i)).validate(uid,groups,myself);}if (uid!=null&&groups!=null&&groups.size()>=0&&contributor!=null) {boolean ex=false;java.util.ArrayList groups2 = new java.util.ArrayList(groups);groups2.add(""+uid);for(int i=0;i<groups2.size();i++) {java.util.regex.Pattern p = java.util.regex.Pattern.compile("^/@[^/]*/@testservice/_group/\\$admin$|^/@testservice/_group/\\$admin$");java.util.regex.Matcher m = p.matcher(""+groups2.get(i));if (m.find()) ex=true;}if (!ex) throw new java.text.ParseException("Property 'contributor' is not writeable.",0);}if (link!=null) for (int i=0;i<link.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)link.get(i)).validate(uid,groups,myself);}if (uid!=null&&groups!=null&&groups.size()>=0&&rights!=null) {boolean ex=false;java.util.ArrayList groups2 = new java.util.ArrayList(groups);groups2.add(""+uid);if (uid != null && uid.equals(myself)) ex=true;for(int i=0;i<groups2.size();i++) {if (groups2.get(i).equals("@")) ex=true;java.util.regex.Pattern p = java.util.regex.Pattern.compile("^/@[^/]*/@testservice/_group/\\$admin$|^/@testservice/_group/\\$admin$");java.util.regex.Matcher m = p.matcher(""+groups2.get(i));if (m.find()) ex=true;}if (!ex) throw new java.text.ParseException("Property 'rights' is not writeable.",0);}if (info!=null) info.validate(uid,groups,myself);if (comment!=null) for (int i=0;i<comment.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)comment.get(i)).validate(uid,groups,myself);}if (uid!=null&&groups!=null&&groups.size()>=0&&comment!=null) {boolean ex=false;java.util.ArrayList groups2 = new java.util.ArrayList(groups);groups2.add(""+uid);for(int i=0;i<groups2.size();i++) {if (groups2.get(i).equals("7")) ex=true;}if (!ex) throw new java.text.ParseException("Property 'comment' is not writeable.",0);}return true;};
	public void maskprop(String uid, java.util.List groups) { jp.reflexworks.atom.mapper.MaskpropContext context = new jp.reflexworks.atom.mapper.MaskpropContext(uid,groups,getCreatorUid());if (author!=null) for (int i=0;i<author.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)author.get(i)).maskprop(context);}if (category!=null) for (int i=0;i<category.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)category.get(i)).maskprop(context);}if (content!=null) content.maskprop(context);if (contributor!=null) for (int i=0;i<contributor.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)contributor.get(i)).maskprop(context);}if (contributor!=null) {boolean ex=false;if (groups==null) groups = new java.util.ArrayList();java.util.ArrayList groups2 = new java.util.ArrayList(context.groups);groups2.add(""+context.uid);for(int i=0;i<groups2.size();i++) {java.util.regex.Pattern p = java.util.regex.Pattern.compile("^/@[^/]*/@testservice/_group/\\$admin$|^/@testservice/_group/\\$admin$");java.util.regex.Matcher m = p.matcher(""+groups2.get(i));if (m.find()) ex=true;}if (!ex) contributor=null;}if (link!=null) for (int i=0;i<link.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)link.get(i)).maskprop(context);}if (rights!=null) {boolean ex=false;if (groups==null) groups = new java.util.ArrayList();java.util.ArrayList groups2 = new java.util.ArrayList(context.groups);groups2.add(""+context.uid);if (uid != null && uid.equals(context.myself)) ex=true;for(int i=0;i<groups2.size();i++) {if (groups2.get(i).equals("@")) ex=true;java.util.regex.Pattern p = java.util.regex.Pattern.compile("^/@[^/]*/@testservice/_group/\\$admin$|^/@testservice/_group/\\$admin$");java.util.regex.Matcher m = p.matcher(""+groups2.get(i));if (m.find()) ex=true;}if (!ex) rights=null;}if (info!=null) info.maskprop(context);if (comment!=null) for (int i=0;i<comment.size();i++) { ((jp.reflexworks.atom.entry.SoftSchema)comment.get(i)).maskprop(context);}if (comment!=null) {boolean ex=false;if (groups==null) groups = new java.util.ArrayList();java.util.ArrayList groups2 = new java.util.ArrayList(groups);groups2.add(""+uid);for(int i=0;i<groups2.size();i++) {if (groups2.get(i).equals("7")) ex=true;}if (!ex) comment=null;}};
	@Override
	public int getsize() {
		return 0;
	}

}
